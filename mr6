// mr4 (mecharod script 6) - mr3 deorbit burn testing from 72 km circular orbit + mr5 updated hoverslam and hover.

set orbiting to 1.
set deorbitBurn to 2.
set reentry to 3.
set falling to 4.
set hoverslamA to 5.
set hoverslamB to 6.

set mode to orbiting.

//set initialdv to SHIP:DELTAV:CURRENT.
//LOCK dv to SHIP:DELTAV:CURRENT.
lock twr to ship:maxthrust / (constant:g0 * ship:mass). 

SET startTime TO TIME:SECONDS.
LOCK now TO TIME:SECONDS-startTime.

SET thrott TO 1.
set targetalt to 82. // the setpoint (bit of land off launchpad is 77, vab 186, admin 91, launchpad 83)

// Vab Roof: -0.097283135961222, -74.6190385749848
// just off the Launchpad: -0.0993657504037605, -74.5574959612902
// Tower Catch Spot: -0.092, -74.5574959612902
// Tower Spawn Spot: -0.092, -74.5571. Note: spawning depends on CoG / control probe not sure which, so adjust tower until catch spot lng is middle of launchpad.

SET padlat TO -0.092.    
SET padlng TO -74.5574959612902. SET spot TO LATLNG(padlat, padlng). // coordinates of a bit off the pad

LOCK lat TO SHIP:GEOPOSITION:LAT.
LOCK lng TO SHIP:GEOPOSITION:LNG.
LOCK myspot TO LATLNG(lat,lng).

LOCK northVec TO  SHIP:NORTH:FOREVECTOR.
LOCK upVec TO SHIP:UP:VECTOR.
LOCK eastVec TO VCRS(upVec,northVec).

LOCK northSpeed TO VDOT(northVec,SHIP:VELOCITY:SURFACE).
LOCK upSpeed TO VDOT(upVec,SHIP:VELOCITY:SURFACE).
LOCK eastSpeed TO VDOT(eastVec,SHIP:VELOCITY:SURFACE).

// PIDs should only be set once. check how to gain schedule, if not possible or finicky make two new loops.

SET EASTPID TO PIDLOOP(1,0.05,6,-0.001,0.001). 
SET NORTHPID TO PIDLOOP(1,0.05,6,-0.001,0.001).
SET EASTPID:SETPOINT TO padlng.
SET NORTHPID:SETPOINT TO padlat.

SET corEASTPID TO PIDLOOP(1,0.05,6,-0.001,0.001). 
SET corNORTHPID TO PIDLOOP(1,0.05,6,-0.001,0.001).
SET corEASTPID:SETPOINT TO padlng.
SET corNORTHPID:SETPOINT TO padlat.

SET eastPIDUpdate TO 0.
SET northPIDUpdate TO 0.
SET targetHeading TO 0.

set p to -3.
set hAtarget TO targetalt + 100.

set done to false.

until done {
	clearscreen.
	print "mode = " + mode.
	PRINT "North Velocity = " + round(northSpeed,2) + " m/s".
	PRINT "East Velocity = " + round(eastSpeed,2) + " m/s".
	print "longitude = " + round(lng,3).
	PRINT  "Latitude dif  = " + (lat - padlat).
	PRINT  "Longitude dif = " + (lng - padlng).
	if mode = orbiting {
		lock steering to -SHIP:VELOCITY:ORBIT.
		if lng > 165 {
			set mode to deorbitBurn.
		}
	} else if mode = deorbitBurn {
		// print "burn dv = " + round(initialdv - dv,3).
		lock throttle to 1.
		lock steering to -SHIP:VELOCITY:ORBIT.
		if SHIP:VELOCITY:ORBIT:mag < 2192 {
			set mode to reentry.
		}
	} else if mode = reentry {
		lock throttle to 0.
		lock steering to lookdirup(LATLNG(lat,lng - 0.2):ALTITUDEPOSITION(ALTITUDE - 1000),northVec).

		set vf to 200. // target mode 4 entry speed
		set ag to -14. // roughly 1g glide horizontal deceleration, assumed constant
		set lngkm to 10.46. // 1 deg lng diff on Earth is 11.2 km (https://www.omnicalculator.com/other/latitude-longitude-distance), scaled down by 600/6382 gives 10.46 km per lng on Kerbin roughly
		lock brakeThreshold to 1 + (vf^2-ship:groundspeed^2)/(2 * ag * 1000 * lngkm).

		if ship:groundspeed < 2000 and altitude < 50000 {
			rcs off.
			if altitude < 10000 or ABS(lng) < (ABS(padlng) + 0.6) {
				set mode to falling.
			}
			if lng > (padlng - (brakeThreshold)) {
				brakes on. 
			}
		} else {
			brakes off.
			rcs on.
		}
		print "lng diff = " + (padlng - lng).
		print "brakeThreshold = " + brakeThreshold.
	} else if mode = falling {
		brakes on.
		rcs on.
		SET falleastpid TO PIDLOOP(0.5,0.05,4,-0.01,0.01). 
		SET fallnorthpid TO PIDLOOP(0.5,0.05,4,-0.01,0.01).
		SET falleastpid:SETPOINT TO padlng.
		SET fallnorthpid:SETPOINT TO padlat.
	
		lock eastPIDUpdate to falleastpid:UPDATE(TIME:SECONDS, lng).
		lock northPIDUpdate to fallnorthpid:UPDATE(TIME:SECONDS, lat).
		LOCK targetVec TO LATLNG(lat - northPIDUpdate,lng - eastPIDUpdate):ALTITUDEPOSITION(ALTITUDE+80).
		LOCK STEERING TO LOOKDIRUP(targetVec,northVec).	

		lock threshold to ABS((ship:verticalspeed^2)/(2*constant:g0*(twr-1))). 
		if (altitude-hAtarget)<threshold {
			set mode to hoverslamA.
		}
	} else if mode = hoverslamA {
		rcs off.
		lock eastPIDUpdate to eastpid:UPDATE(TIME:SECONDS, lng).
		lock northPIDUpdate to northpid:UPDATE(TIME:SECONDS, lat).

		LOCK targetVec TO LATLNG(lat + p*northPIDUpdate,lng + p*eastPIDUpdate):ALTITUDEPOSITION(ALTITUDE+100).
		LOCK STEERING TO LOOKDIRUP(targetVec,northVec).	
		lock throttle to (1/twr)*((ship:verticalspeed^2)/(2*constant:g0*(altitude-(hAtarget))) + 1).
		if ship:verticalspeed > -100 { 
			lock p to 1.
			if ship:verticalspeed > -30 {
				set mode to hoverslamB.
			}
		}
	} else if mode = hoverslamB {
		brakes off.
		rcs off.
		lock eastPIDUpdate to coreastpid:UPDATE(TIME:SECONDS, lng).
		lock northPIDUpdate to cornorthpid:UPDATE(TIME:SECONDS, lat).

		LOCK targetVec TO LATLNG(lat + northPIDUpdate,lng + eastPIDUpdate):ALTITUDEPOSITION(ALTITUDE+100).
		LOCK STEERING TO LOOKDIRUP(targetVec,northVec).	
		lock throttle to (1/twr)*(ship:verticalspeed^2/(2*constant:g0*(altitude-(targetalt))) + 1).

		if ship:verticalspeed > 0 {
			print "Landed".
			set done to true.
		}
	}

}

// Notes:  (around 1250 m/s in orbit with 40 ton payload, vent to 900 m/s dv in orbit)

// Test 1: additional drag from claws lead to 2 deg offset at 10 km mark, move deorbit by 10 to 170 (or adjust by 2 and remove adaptive braking, but if it comes up short then no redundancy)

// Test 2: adaptive braking insufficient deceleration led to around 0.4 deg lng overshoot. Rest of code works ok. adaptive braking offset set to 1 from 0.6, deorbit moved to 165.

// Test 3: Full success :) 23 m/s dv left

// Test 4: Also full success :) 34 m/s dv left, trajectory similar. More testing with slightly different initial orbits would be more thorough
